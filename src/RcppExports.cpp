// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// qr_factor
List qr_factor(arma::mat F, arma::mat L);
RcppExport SEXP _bpCausal_qr_factor(SEXP FSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(qr_factor(F, L));
    return rcpp_result_gen;
END_RCPP
}
// sortX
arma::mat sortX(arma::mat X, arma::mat index);
RcppExport SEXP _bpCausal_sortX(SEXP XSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(sortX(X, index));
    return rcpp_result_gen;
END_RCPP
}
// getSubX
arma::mat getSubX(arma::mat X, arma::mat index);
RcppExport SEXP _bpCausal_getSubX(SEXP XSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(getSubX(X, index));
    return rcpp_result_gen;
END_RCPP
}
// reShape
arma::mat reShape(arma::mat fit, arma::mat index, arma::mat idBreak);
RcppExport SEXP _bpCausal_reShape(SEXP fitSEXP, SEXP indexSEXP, SEXP idBreakSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index(indexSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type idBreak(idBreakSEXP);
    rcpp_result_gen = Rcpp::wrap(reShape(fit, index, idBreak));
    return rcpp_result_gen;
END_RCPP
}
// breakID
arma::mat breakID(arma::mat id);
RcppExport SEXP _bpCausal_breakID(SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(breakID(id));
    return rcpp_result_gen;
END_RCPP
}
// genXY
arma::mat genXY(arma::mat x, arma::mat y, arma::mat idBreak);
RcppExport SEXP _bpCausal_genXY(SEXP xSEXP, SEXP ySEXP, SEXP idBreakSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type idBreak(idBreakSEXP);
    rcpp_result_gen = Rcpp::wrap(genXY(x, y, idBreak));
    return rcpp_result_gen;
END_RCPP
}
// genCov1
arma::mat genCov1(arma::mat X, arma::mat invCov0, double sigma2);
RcppExport SEXP _bpCausal_genCov1(SEXP XSEXP, SEXP invCov0SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type invCov0(invCov0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(genCov1(X, invCov0, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// genMu
arma::mat genMu(arma::mat X, arma::mat Y, arma::mat Cov1, double sigma2);
RcppExport SEXP _bpCausal_genMu(SEXP XSEXP, SEXP YSEXP, SEXP Cov1SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Cov1(Cov1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(genMu(X, Y, Cov1, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// sampleN
arma::mat sampleN(arma::mat X, arma::mat Y, arma::mat Cov0, double sigma2);
RcppExport SEXP _bpCausal_sampleN(SEXP XSEXP, SEXP YSEXP, SEXP Cov0SEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Cov0(Cov0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleN(X, Y, Cov0, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// sampleCN
arma::mat sampleCN(arma::mat M, arma::mat S, arma::mat m);
RcppExport SEXP _bpCausal_sampleCN(SEXP MSEXP, SEXP SSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleCN(M, S, m));
    return rcpp_result_gen;
END_RCPP
}
// sampleSubAlpha
arma::mat sampleSubAlpha(arma::mat M, arma::mat S, int r, int id);
RcppExport SEXP _bpCausal_sampleSubAlpha(SEXP MSEXP, SEXP SSEXP, SEXP rSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSubAlpha(M, S, r, id));
    return rcpp_result_gen;
END_RCPP
}
// iterGenAlpha
arma::mat iterGenAlpha(arma::mat XX, arma::mat XY, arma::mat A0, int N, int k, int r, double sigma2);
RcppExport SEXP _bpCausal_iterGenAlpha(SEXP XXSEXP, SEXP XYSEXP, SEXP A0SEXP, SEXP NSEXP, SEXP kSEXP, SEXP rSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XY(XYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(iterGenAlpha(XX, XY, A0, N, k, r, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// sampleAlpha
arma::mat sampleAlpha(arma::mat X, arma::mat y, arma::mat A0, arma::mat idBreak, int N, int r, double sigma2);
RcppExport SEXP _bpCausal_sampleAlpha(SEXP XSEXP, SEXP ySEXP, SEXP A0SEXP, SEXP idBreakSEXP, SEXP NSEXP, SEXP rSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type idBreak(idBreakSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleAlpha(X, y, A0, idBreak, N, r, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// genBi
arma::mat genBi(int k);
RcppExport SEXP _bpCausal_genBi(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(genBi(k));
    return rcpp_result_gen;
END_RCPP
}
// permute
List permute(arma::mat omega, arma::mat xi);
RcppExport SEXP _bpCausal_permute(SEXP omegaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(permute(omega, xi));
    return rcpp_result_gen;
END_RCPP
}
// permuteF
List permuteF(arma::mat omega, arma::mat gamma, arma::mat F);
RcppExport SEXP _bpCausal_permuteF(SEXP omegaSEXP, SEXP gammaSEXP, SEXP FSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    rcpp_result_gen = Rcpp::wrap(permuteF(omega, gamma, F));
    return rcpp_result_gen;
END_RCPP
}
// genTildeA
arma::mat genTildeA(arma::mat A, arma::mat gamma, arma::mat omega, arma::mat id, int r);
RcppExport SEXP _bpCausal_genTildeA(SEXP ASEXP, SEXP gammaSEXP, SEXP omegaSEXP, SEXP idSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(genTildeA(A, gamma, omega, id, r));
    return rcpp_result_gen;
END_RCPP
}
// genTildeZ
arma::mat genTildeZ(arma::mat Z, arma::mat f, arma::mat omega, arma::mat time);
RcppExport SEXP _bpCausal_genTildeZ(SEXP ZSEXP, SEXP fSEXP, SEXP omegaSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(genTildeZ(Z, f, omega, time));
    return rcpp_result_gen;
END_RCPP
}
// genTildeTau
arma::mat genTildeTau(arma::mat Z, arma::mat A, arma::mat Alpha, arma::mat Xi, arma::mat Gamma, arma::mat F, arma::mat id0, arma::mat time);
RcppExport SEXP _bpCausal_genTildeTau(SEXP ZSEXP, SEXP ASEXP, SEXP AlphaSEXP, SEXP XiSEXP, SEXP GammaSEXP, SEXP FSEXP, SEXP id0SEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Alpha(AlphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xi(XiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type id0(id0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(genTildeTau(Z, A, Alpha, Xi, Gamma, F, id0, time));
    return rcpp_result_gen;
END_RCPP
}
// iterGenXi
arma::mat iterGenXi(arma::mat Xi_old, arma::mat Phi, arma::mat XX, arma::mat XY, int T, int k, double sigma2);
RcppExport SEXP _bpCausal_iterGenXi(SEXP Xi_oldSEXP, SEXP PhiSEXP, SEXP XXSEXP, SEXP XYSEXP, SEXP TSEXP, SEXP kSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Xi_old(Xi_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XY(XYSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(iterGenXi(Xi_old, Phi, XX, XY, T, k, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// sampleXi
arma::mat sampleXi(arma::mat X, arma::mat y, arma::mat Xi_old, arma::mat Phi, arma::mat timeBreak, int T, double sigma2);
RcppExport SEXP _bpCausal_sampleXi(SEXP XSEXP, SEXP ySEXP, SEXP Xi_oldSEXP, SEXP PhiSEXP, SEXP timeBreakSEXP, SEXP TSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xi_old(Xi_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type timeBreak(timeBreakSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleXi(X, y, Xi_old, Phi, timeBreak, T, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// samplePhi
arma::mat samplePhi(arma::mat Xi, arma::mat P0);
RcppExport SEXP _bpCausal_samplePhi(SEXP XiSEXP, SEXP P0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Xi(XiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P0(P0SEXP);
    rcpp_result_gen = Rcpp::wrap(samplePhi(Xi, P0));
    return rcpp_result_gen;
END_RCPP
}
// getREfit
arma::mat getREfit(arma::mat X, arma::mat eff, arma::mat index);
RcppExport SEXP _bpCausal_getREfit(SEXP XSEXP, SEXP effSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eff(effSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(getREfit(X, eff, index));
    return rcpp_result_gen;
END_RCPP
}
// getFactorFit
arma::mat getFactorFit(arma::mat gamma, arma::mat f, arma::mat index1, arma::mat index2);
RcppExport SEXP _bpCausal_getFactorFit(SEXP gammaSEXP, SEXP fSEXP, SEXP index1SEXP, SEXP index2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index1(index1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index2(index2SEXP);
    rcpp_result_gen = Rcpp::wrap(getFactorFit(gamma, f, index1, index2));
    return rcpp_result_gen;
END_RCPP
}
// sampleSigmaE2
double sampleSigmaE2(arma::mat res, double c0, double d0);
RcppExport SEXP _bpCausal_sampleSigmaE2(SEXP resSEXP, SEXP c0SEXP, SEXP d0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type d0(d0SEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSigmaE2(res, c0, d0));
    return rcpp_result_gen;
END_RCPP
}
// sampleG
double sampleG(double a, double b);
RcppExport SEXP _bpCausal_sampleG(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleG(a, b));
    return rcpp_result_gen;
END_RCPP
}
// insertB
arma::mat insertB(arma::mat B);
RcppExport SEXP _bpCausal_insertB(SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(insertB(B));
    return rcpp_result_gen;
END_RCPP
}
// rrinvgauss
double rrinvgauss(double mu, double lambda);
RcppExport SEXP _bpCausal_rrinvgauss(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rrinvgauss(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bpCausal_qr_factor", (DL_FUNC) &_bpCausal_qr_factor, 2},
    {"_bpCausal_sortX", (DL_FUNC) &_bpCausal_sortX, 2},
    {"_bpCausal_getSubX", (DL_FUNC) &_bpCausal_getSubX, 2},
    {"_bpCausal_reShape", (DL_FUNC) &_bpCausal_reShape, 3},
    {"_bpCausal_breakID", (DL_FUNC) &_bpCausal_breakID, 1},
    {"_bpCausal_genXY", (DL_FUNC) &_bpCausal_genXY, 3},
    {"_bpCausal_genCov1", (DL_FUNC) &_bpCausal_genCov1, 3},
    {"_bpCausal_genMu", (DL_FUNC) &_bpCausal_genMu, 4},
    {"_bpCausal_sampleN", (DL_FUNC) &_bpCausal_sampleN, 4},
    {"_bpCausal_sampleCN", (DL_FUNC) &_bpCausal_sampleCN, 3},
    {"_bpCausal_sampleSubAlpha", (DL_FUNC) &_bpCausal_sampleSubAlpha, 4},
    {"_bpCausal_iterGenAlpha", (DL_FUNC) &_bpCausal_iterGenAlpha, 7},
    {"_bpCausal_sampleAlpha", (DL_FUNC) &_bpCausal_sampleAlpha, 7},
    {"_bpCausal_genBi", (DL_FUNC) &_bpCausal_genBi, 1},
    {"_bpCausal_permute", (DL_FUNC) &_bpCausal_permute, 2},
    {"_bpCausal_permuteF", (DL_FUNC) &_bpCausal_permuteF, 3},
    {"_bpCausal_genTildeA", (DL_FUNC) &_bpCausal_genTildeA, 5},
    {"_bpCausal_genTildeZ", (DL_FUNC) &_bpCausal_genTildeZ, 4},
    {"_bpCausal_genTildeTau", (DL_FUNC) &_bpCausal_genTildeTau, 8},
    {"_bpCausal_iterGenXi", (DL_FUNC) &_bpCausal_iterGenXi, 7},
    {"_bpCausal_sampleXi", (DL_FUNC) &_bpCausal_sampleXi, 7},
    {"_bpCausal_samplePhi", (DL_FUNC) &_bpCausal_samplePhi, 2},
    {"_bpCausal_getREfit", (DL_FUNC) &_bpCausal_getREfit, 3},
    {"_bpCausal_getFactorFit", (DL_FUNC) &_bpCausal_getFactorFit, 4},
    {"_bpCausal_sampleSigmaE2", (DL_FUNC) &_bpCausal_sampleSigmaE2, 3},
    {"_bpCausal_sampleG", (DL_FUNC) &_bpCausal_sampleG, 2},
    {"_bpCausal_insertB", (DL_FUNC) &_bpCausal_insertB, 1},
    {"_bpCausal_rrinvgauss", (DL_FUNC) &_bpCausal_rrinvgauss, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_bpCausal(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
